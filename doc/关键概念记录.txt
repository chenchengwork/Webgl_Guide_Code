一.着色器
    1. 顶点着色器: 控制点的位置和大小

    2. 片元着色器: 控制点的颜色

    3. 从javascript程序中传入数据到glsl
        attribute vec4 a_Position
        存储限定符  类型   变量名
        (1). attribute变量: 传输的是和顶点相关的数据
        (2). uniform变量: 传输的是那些对于所有顶点都相同的(或与顶点无关)的数据

二. 缓冲区对象
   1. 使用缓冲区对象向顶点着色器传入多个顶点数据,步骤:
        (1). 创建缓冲区对象 (var buffer = gl.createBuffer()) -> gl.deleteBuffer(buffer) //删除创建出来的缓冲区对象
        (2). 绑定缓冲区对象到目标 (gl.bindBuffer(gl.ARRAY_BUFFER, buffter))
            "目标": gl.ARRAY_BUFFER 或 gl.ELEMENT_ARRAY_BUFFER
            gl.ARRAY_BUFFER: 缓冲区对象中包含了顶点数据
            gl.ELEMENT_ARRAY_BUFFER: 缓冲区对象中包含了顶点的索引

        (3). 将数据写入缓冲区 (gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW))
            参数1: 目标
            参数2: 写入缓冲区的数据
            参数3: 表示如何使用缓冲区对象中的数据, 主要帮助webgl优化
                gl.STATIC_DRAW: 只会向缓冲区对象中写入一次数据, 但需要绘制很多次
                gl.STREAM_DRAW: 只会向缓冲区对象中写入一次数据, 然后绘制若干次
                gl.DYNAMIC_DRAW: 会向缓冲区对象中写入多次数据, 并绘制很多次

        (4). 将缓冲区对象分配给一个attribute变量 (gl.vertexAttribPointer(location, size, type, normalized, stride, offset))
            参数1: attribute变量的位置
            参数2: 指定缓冲区中每个顶点的分量个数(1~4)
            参数3: 指定数据类型
                gl.UNSIGNED_BYTE
                gl.SHORT
                gl.UNSIGNED_SHORT
                gl.INT
                gl.UNSIGNED_INT
                gl.FLOAT

            参数4: 传入true | false, 表明是否将非浮点型的数据归一化到[0, 1] | [-1, 1]
            参数5: 相邻两个顶点之间的字节数,默认0
            参数6: 缓冲区对象中的偏移量, attribute变量从缓冲区中何处开始存储

        (5). 开启attribute变量 (gl.enableVertexAttribArray(a_Position))
            参数: attribute变量的存储位置
            // 使顶点着色器可以访问缓冲中的数据

            注意: 开区attribute变量后, 就不能使用gl.vertexAttrib[1234]f()向它传入数据了, 除非关闭attribute变量

三. 移动/旋转/缩放
    1. 平移

    2. 旋转
        (1). 旋转轴
        (2). 旋转方向 (顺时针 | 逆时针)
        (3). 旋转角度

        逆时针: 正旋转

    3. 缩放

    变换矩阵: <新坐标> = <变换矩阵> * <旧坐标>

四. 颜色与纹理
    1. 将非坐标数据传入顶点着色器

    2. varying变量的作用和内插过程

    3. 纹理映射: 根据纹理图像, 为之前光栅化后的片元涂上合适的颜色;组成纹理图像的像素被成为"纹素"

    4. 纹理坐标: 纹理图像上的坐标, 通过纹理坐标获取纹素颜色
       // webgl使用s和t命名纹理坐标(st坐标系统)
       // 纹理坐标始终是(1.0, 1.0), 和图片尺寸无关

其他:
    1. 齐次坐标系: (x, y, z, w) 等价于三维坐标系 (x/w, y/w, z/w)

    2.gl.drawArrays(mode, first, count) // 绘制
        参数说明:
            mode: 绘制方式(常量)
                    gl.POINTS,      // 一系列点
                    gl.LINES,       // 一系列单独的线段
                    gl.LINES_STRIP, // 一系列连接的线段
                    gl.LINES_LOOP,  // 一系列连接的线段, 最后的点和起始点连接在一起
                    gl.TRIANGLES,   // 一系列单独的三角形
                    gl.TRIANGLE_STRIP, // 一系列连接的三角形
                    gl.TRIANGLE_FAN,    // 一系列三角形组成的扇形

            first: 指定从哪个顶点开始绘制

            count: 指定绘制需要多少个顶点

    . gl.getAttribLocation(gl.program, attribute变量名称) //获取顶点的存储位置

    // 向顶点赋值的同族函数
    . gl.vertexAttrib1f(顶点的存储位置变量, 0.0)  //向顶点变量赋值
    . gl.vertexAttrib2f(顶点的存储位置变量, 0.0, 0.0)  //向顶点变量赋值
    . gl.vertexAttrib3f(顶点的存储位置变量, 0.0, 0.0, 0.0)  //向顶点变量赋值
    . gl.vertexAttrib4f(顶点的存储位置变量, 0.0, 0.0, 0.0, 1.0)  //向顶点变量赋值

    // 是上述方法的矢量版,函数名称多加了一个v
    . gl.vertexAttrib1fv(顶点的存储位置变量, new Float32Array(0.0))  //向顶点变量赋值
    . gl.vertexAttrib2fv(顶点的存储位置变量, new Float32Array(0.0, 0.0))  //向顶点变量赋值
    . gl.vertexAttrib3fv(顶点的存储位置变量, new Float32Array(0.0, 0.0, 0.0))  //向顶点变量赋值
    . gl.vertexAttrib4fv(顶点的存储位置变量, new Float32Array(0.0, 0.0, 0.0, 1.0))  //向顶点变量赋值


    3. webgl坐标系中的范围: 0 ~ 1

    4. gl.program -> 程序对象
